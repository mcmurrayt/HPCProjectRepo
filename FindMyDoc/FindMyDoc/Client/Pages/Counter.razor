@page "/counter"
@inject HttpClient Http
@inject ToastService toastService
@using FindMyDoc.Shared;
@using System.Net.Http.Json;
@using System.ComponentModel.DataAnnotations;
@using FindMyDoc.Client.Services;
@using FindMyDoc.Server.Models;


<h1>Find Your Doc Here:</h1>
<style>
body {
background-color: #DCBCE2;
border-bottom: 1px solid #DCBCE2;
justify-content: flex-end;
height: 3.5rem;
.my-form #availabilityDate {
    width: 100px;
}

}
</style>

<EditForm Model="@input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="availabilityDate">What is your Availability Date:</label>
        <InputDate id="availabilityDate" style="width: 150px;" @bind-Value="@input.AvailabilityDate" />
    </div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.PrimaryCareProvider" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Would you like a Primary Care Provider?
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.Physician" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Would you like to see a Physician?
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.Nurse" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Would you like to see a Nurse?
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.PhysicianAssistant" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Would you like to see a Physician Assistant?
	</label>
</div>

    <button onclick=@(() => {ShowText(); GenerateProvider();}) type="submit" class="btn btn-primary">Submit</button>

    
    @if (buttonClicked)
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">User Information</h5>
                <hr />
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Username:</strong> @model.UserName</p>
                        <p><strong>First Name:</strong> @model.firstName</p>
                        <p><strong>Last Name:</strong> @model.lastName</p>
                        <p><strong>Date of Birth:</strong> @model.dob.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Address:</strong> @model.address</p>
                        <p><strong>County:</strong> @model.county</p>
                        <p><strong>State:</strong> @model.state</p>
                        <p><strong>Insurance Number:</strong> @model.insuranceNum</p>
                    </div>
                </div>
                <hr />
                <h5 class="card-title">Provider Report</h5>
                <p class="card-text"><strong>Total Number of Providers:</strong> @sumTotal</p>
            </div>
        </div>
    }

    </EditForm>

@code {


    private UserInputService s = new UserInputService();
    private inputData input = new inputData();
    private Provider p = new Provider();
    private int num;
    private ApplicationUser model;
    public int sumTotal => num;


    private bool buttonClicked = false;

    private void ShowText()
    {
        buttonClicked = true;
    }

    private void HandleValidSubmit()
    {
        //Handle form submission here

    }

    private async Task GenerateProvider()
    {
        try
        {
            num = s.GetProviderNum(p, input.PrimaryCareProvider, input.Physician, input.Nurse, input.PhysicianAssistant);
            toastService.ShowToast("Report Generated Succesfully", ToastLevel.Success, 5000);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task<Provider> GetProvider()
    {
        try
        {
            Provider p = await Http.GetFromJsonAsync<Provider>("api/get-provider");
            Console.WriteLine(p);
            return p;
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            return new Provider();
        }
    }

    private async Task CreateProvider()
    {
        try
        {
            bool success = await Http.GetFromJsonAsync<bool>("api/create-provider");
            Console.WriteLine(success);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            model = await Http.GetFromJsonAsync<ApplicationUser>("output/on-get");
            p = await GetProvider();
            await CreateProvider();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private class inputData
    {

        [Required(ErrorMessage = "Availability Date is required.")]
        public DateTime? AvailabilityDate { get; set; }

        [Required(ErrorMessage = "Primary Care Provider is required.")]
        public bool PrimaryCareProvider { get; set; } = false;

        [Required(ErrorMessage = "Physician is required.")]
        public bool Physician { get; set; } = false;

        [Required(ErrorMessage = "Nurse is required.")]
        public bool Nurse { get; set; } = false;

        [Required(ErrorMessage = "Physician Assistant is required.")]
        public bool PhysicianAssistant { get; set; } = false;
    }
}




