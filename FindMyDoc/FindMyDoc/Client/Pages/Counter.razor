@page "/counter"
@inject HttpClient Http
@using FindMyDoc.Shared;
@using System.Net.Http.Json;
@using System.ComponentModel.DataAnnotations;
@using FindMyDoc.Client.Services;

<h1>User Form</h1>
<style>
body {
background-color: #D9CFE7;
border-bottom: 1px solid #DCBCE2;
justify-content: flex-end;
height: 3.5rem;


}
</style>

<EditForm Model="@input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="insuranceNumber">What is your Insurance Number:</label>
        <InputText id="insuranceNumber" class="form-control" @bind-Value="@input.InsuranceNumber" />
    </div>

    <div class="form-group">
        <label for="availabilityDate">What is your Availability Date:</label>
        <InputDate id="availabilityDate" class="form-control" @bind-Value="@input.AvailabilityDate" />
    </div>

    <div class="form-group">
        <label for="primaryCareProvider">Do You Have a Primary Care Provider:</label>
        <select @bind=@input.PrimaryCareProvider>
<option value="true">Yes</option>
<option value="false">No</option>
</select>
    </div>

    <div class="form-group">
        <label for="physician">Do you need a Physician:</label>
        <select @bind=@input.Physician>
<option value="true">Yes</option>
<option value="false">No</option>
</select>
    </div>

    <div class="form-group">
        <label for="nurse">Do you need a Nurse:</label>
        <select @bind=@input.Nurse>
<option value="true">Yes</option>
<option value="false">No</option>
</select>
    </div>

    <div class="form-group">
        <label for="physicianAssistant">Do you need a Physician Assistant:</label>
        <select @bind=@input.PhysicianAssistant>
<option value="true">Yes</option>
<option value="false">No</option>
</select>
    </div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.PrimaryCareProvider" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Do You Have a Primary Care Provider
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.Physician" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Do you need a Physician
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.Nurse" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Do you need a Nurse
	</label>
</div>

<div class="form-check">
<input class="form-check-input" type="checkbox" @bind-value="input.PhysicianAssistant" id="flexCheckDefault">
<label class="form-check-label" for"flexCheckDefault">
	Do you need a Physician Assistant
	</label>
</div>

    <button onclick=@(() => num = s.GetProviderNum(p, input.PrimaryCareProvider, input.Physician, input.Nurse, input.PhysicianAssistant))>Generate</button>
    <button onclick=@(() => PrintNum(num))>Print Num</button>
    <button type="submit" class="btn btn-primary">Submit</button>

    </EditForm>

@code {
    private UserInputService s = new UserInputService();
    private inputData input = new inputData();
    private Provider p = new Provider();
    private int num;

    private void HandleValidSubmit()
    {
        //Handle form submission here
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if(firstRender)
        {
            p = GetProvider().Result;
        }
    }

    private class inputData
    {
        [Required(ErrorMessage = "Insurance Number is required.")]
        public string InsuranceNumber { get; set; }

        [Required(ErrorMessage = "Availability Date is required.")]
        public DateTime? AvailabilityDate { get; set; }

        [Required(ErrorMessage = "Primary Care Provider is required.")]
        public bool PrimaryCareProvider { get; set; } = false;

        [Required(ErrorMessage = "Physician is required.")]
        public bool Physician { get; set; } = false;

        [Required(ErrorMessage = "Nurse is required.")]
        public bool Nurse { get; set; } = false;

        [Required(ErrorMessage = "Physician Assistant is required.")]
        public bool PhysicianAssistant { get; set; } = false;
    }
}

@functions
{
    private async Task<Provider> GetProvider()
    {
        try
        {
            Provider p = await Http.GetFromJsonAsync<Provider>("api/get-provider");
            Console.WriteLine(p);
            return p;
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            return new Provider();
        }
    }

    private void PrintNum(int num)
    {
        Console.WriteLine(num);
    }
}





